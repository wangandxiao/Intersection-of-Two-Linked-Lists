/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        if(headA == NULL || headB == NULL) return NULL;
        //if(headA == headB) return headA;
        ListNode *p1 = headA;
        ListNode *p2 = headB;
        int nStep1 = 0;
        int nStep2 = 0;
        int n;
        while (p1->next != NULL){
            p1 = p1->next;
            nStep1++;
        }
        while (p2->next != NULL){
            p2 = p2->next;
            nStep2++;
        }
        n = nStep1 - nStep2 >= 0?nStep1-nStep2:nStep2 -nStep1;
        p1 = nStep1 - nStep2 >= 0?headA:headB;
        p2 = nStep1 - nStep2 >= 0?headB:headA;
        /*if (n==0) {
            p1 = headA;
            p2 = headB;
        }*/
        while(n>0){
            p1 = p1->next;
            n--;
        }
        //if (p1==p2) return p1;
        while(1){
            if (p1==p2) return p1;
            if (p1->next==NULL || p2->next==NULL) break;
            p1 = p1->next;
            p2 = p2->next;
        }
        return NULL;    
    }
};
